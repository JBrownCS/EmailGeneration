import reports
import emails
import json
import locale
import operator
import os



#Format the dictionary of car data into a readable string for the summary
def format_car_str(car):
    return f"{car['car_make']} {car['car_model']} ({car['car_year']})"

'''
Converts JSON data into list of lists for pdf generation
'''
def convert_to_table(json_data):
    data_list = [['ID', 'Car', 'Price', 'Total Sales']]
    for item in json_data:
        data_list.append(
            [item['id'],
            format_car_str(item['car']),
            item['price'],
            item['total_sales']]
        )

    return data_list

'''
Reads the car data from the JSON file and finds
1) The car model with the most revenue
2) The car with the most sales
3) The most popular car year based on how many of that year were sold

Also, a summary will be made of this data for the pdf
'''
def process_data(car_data):
   
    #Dictionary containing car with most sales
    most_sales = {"total_sales":0}
    #Dictionary containing year as key and count as value
    year_dict = dict()
    #dictionary containing car with maximum revenue
    max_revenue = {"revenue":0}


    for item in car_data:
        
        #add 1 to count for a particular year
        try:
            year_dict[item['car']['car_year']] += 1
        except KeyError:
            year_dict[item['car']['car_year']] = 1

        # Calculate the revenue generated by this model (price * total_sales)
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        #if total sales is greater than the latest entry, update most_sales with new car
        if most_sales['total_sales'] < item['total_sales']:
            most_sales.update(item)

    year_dict = dict(sorted(year_dict.items() ,key=operator.itemgetter(1), reverse=True))
    summary = [
        f"The {format_car_str(max_revenue['car'])} generated the most revenue: ${max_revenue['revenue']}.",
        f"The {format_car_str(most_sales['car'])} had the most sales: {most_sales['total_sales']}.",
        f"The most popular year was {max(year_dict.items(), key=operator.itemgetter(1))[0]} with {max(year_dict.items(), key=operator.itemgetter(1))[1]} sales."
    ]
    
    return summary

#Generate pdf based on JSON data and send it via email
def main():
   #Read Data
   file = open('EmailProject/car_sales.json')
   data = json.load(file)
   file.close()

   #Process data to form summary, table data, and email body
   summary = process_data(data)
   table_data = convert_to_table(data)
   info_block = "<br/>".join(summary)
   #return this into a PDF report
   reports.generatePDF("EmailProject/tmp/report.pdf", "Sales Summary for last month", info_block, table_data)
   # send the PDF report as an email attachments
   sender = "automation@example.com"
   receiver = "{}@example.com".format(os.environ.get('USER'))
   subject = "Sales summary for last month"
   body = info_block
   message = emails.create_message(sender, receiver, subject, body, "EmailProject/tmp/report.pdf")
   emails.send(message)


if __name__ == "__main__":
  main()

